# Generated by Django 4.2.23 on 2025-07-07 19:34

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CropYield",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        help_text="Year for the crop yield data",
                        validators=[
                            django.core.validators.MinValueValidator(1800),
                            django.core.validators.MaxValueValidator(2100),
                        ],
                    ),
                ),
                (
                    "crop_type",
                    models.CharField(
                        default="corn_grain",
                        help_text="Type of crop (e.g., corn_grain, soybeans, wheat)",
                        max_length=50,
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        default="US",
                        help_text="Country code (e.g., US, CA, MX)",
                        max_length=3,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        help_text="State code for regional data (optional)",
                        max_length=2,
                    ),
                ),
                (
                    "yield_value",
                    models.IntegerField(
                        help_text="Crop yield value in appropriate units (e.g., thousand metric tons)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "yield_unit",
                    models.CharField(
                        default="thousand_metric_tons",
                        help_text="Unit of measurement for yield value",
                        max_length=30,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True, help_text="Data source or reference", max_length=100
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Crop Yield",
                "verbose_name_plural": "Crop Yields",
                "db_table": "crop_yields",
            },
        ),
        migrations.CreateModel(
            name="DailyWeather",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(help_text="Date of the weather observation")),
                (
                    "max_temp",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum temperature in tenths of degrees Celsius. NULL if missing (-9999 in source)",
                        null=True,
                    ),
                ),
                (
                    "min_temp",
                    models.IntegerField(
                        blank=True,
                        help_text="Minimum temperature in tenths of degrees Celsius. NULL if missing (-9999 in source)",
                        null=True,
                    ),
                ),
                (
                    "precipitation",
                    models.IntegerField(
                        blank=True,
                        help_text="Precipitation in tenths of millimeters. NULL if missing (-9999 in source)",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Daily Weather Record",
                "verbose_name_plural": "Daily Weather Records",
                "db_table": "daily_weather",
            },
        ),
        migrations.CreateModel(
            name="WeatherStation",
            fields=[
                (
                    "station_id",
                    models.CharField(
                        help_text="Weather station identifier (e.g., USC00110072)",
                        max_length=20,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Human-readable station name",
                        max_length=255,
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Station latitude in decimal degrees",
                        max_digits=9,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-90.0),
                            django.core.validators.MaxValueValidator(90.0),
                        ],
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Station longitude in decimal degrees",
                        max_digits=9,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-180.0),
                            django.core.validators.MaxValueValidator(180.0),
                        ],
                    ),
                ),
                (
                    "elevation",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Station elevation in meters",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True, help_text="US state abbreviation", max_length=2
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Weather Station",
                "verbose_name_plural": "Weather Stations",
                "db_table": "weather_stations",
            },
        ),
        migrations.CreateModel(
            name="YearlyWeatherStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        help_text="Year for these statistics",
                        validators=[
                            django.core.validators.MinValueValidator(1800),
                            django.core.validators.MaxValueValidator(2100),
                        ],
                    ),
                ),
                (
                    "avg_max_temp",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Average maximum temperature in tenths of degrees Celsius",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "avg_min_temp",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Average minimum temperature in tenths of degrees Celsius",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "max_temp",
                    models.IntegerField(
                        blank=True,
                        help_text="Highest maximum temperature in tenths of degrees Celsius",
                        null=True,
                    ),
                ),
                (
                    "min_temp",
                    models.IntegerField(
                        blank=True,
                        help_text="Lowest minimum temperature in tenths of degrees Celsius",
                        null=True,
                    ),
                ),
                (
                    "total_precipitation",
                    models.IntegerField(
                        blank=True,
                        help_text="Total precipitation in tenths of millimeters",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "avg_precipitation",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Average daily precipitation in tenths of millimeters",
                        max_digits=8,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "max_precipitation",
                    models.IntegerField(
                        blank=True,
                        help_text="Highest daily precipitation in tenths of millimeters",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "total_records",
                    models.IntegerField(
                        default=0,
                        help_text="Total number of daily records for this year",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "records_with_temp",
                    models.IntegerField(
                        default=0,
                        help_text="Number of records with valid temperature data",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "records_with_precipitation",
                    models.IntegerField(
                        default=0,
                        help_text="Number of records with valid precipitation data",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "station",
                    models.ForeignKey(
                        help_text="Weather station for these statistics",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="yearly_stats",
                        to="models.weatherstation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Yearly Weather Statistics",
                "verbose_name_plural": "Yearly Weather Statistics",
                "db_table": "yearly_weather_stats",
            },
        ),
        migrations.AddIndex(
            model_name="weatherstation",
            index=models.Index(fields=["state"], name="weather_sta_state_1a2c04_idx"),
        ),
        migrations.AddIndex(
            model_name="weatherstation",
            index=models.Index(
                fields=["created_at"], name="weather_sta_created_54800d_idx"
            ),
        ),
        migrations.AddField(
            model_name="dailyweather",
            name="station",
            field=models.ForeignKey(
                help_text="Weather station that recorded this observation",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="daily_records",
                to="models.weatherstation",
            ),
        ),
        migrations.AddIndex(
            model_name="cropyield",
            index=models.Index(fields=["year"], name="crop_yields_year_4d9217_idx"),
        ),
        migrations.AddIndex(
            model_name="cropyield",
            index=models.Index(
                fields=["crop_type", "year"], name="crop_yields_crop_ty_c0b996_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cropyield",
            index=models.Index(
                fields=["country", "year"], name="crop_yields_country_bb14f4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cropyield",
            index=models.Index(
                fields=["year", "yield_value"], name="crop_yields_year_64a145_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="cropyield",
            unique_together={("year", "crop_type", "country", "state")},
        ),
        migrations.AddIndex(
            model_name="yearlyweatherstats",
            index=models.Index(
                fields=["station", "year"], name="yearly_weat_station_379d5e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="yearlyweatherstats",
            index=models.Index(fields=["year"], name="yearly_weat_year_ff586f_idx"),
        ),
        migrations.AddIndex(
            model_name="yearlyweatherstats",
            index=models.Index(
                fields=["year", "avg_max_temp"], name="yearly_weat_year_06d8ad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="yearlyweatherstats",
            index=models.Index(
                fields=["year", "avg_min_temp"], name="yearly_weat_year_b1fa62_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="yearlyweatherstats",
            index=models.Index(
                fields=["year", "total_precipitation"],
                name="yearly_weat_year_9381f3_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="yearlyweatherstats",
            unique_together={("station", "year")},
        ),
        migrations.AddIndex(
            model_name="dailyweather",
            index=models.Index(
                fields=["station", "date"], name="daily_weath_station_d26de8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dailyweather",
            index=models.Index(fields=["date"], name="daily_weath_date_7ecf90_idx"),
        ),
        migrations.AddIndex(
            model_name="dailyweather",
            index=models.Index(
                fields=["station", "date", "max_temp"],
                name="daily_weath_station_f660b5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="dailyweather",
            index=models.Index(
                fields=["station", "date", "min_temp"],
                name="daily_weath_station_50e70c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="dailyweather",
            index=models.Index(
                fields=["station", "date", "precipitation"],
                name="daily_weath_station_208c37_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dailyweather",
            unique_together={("station", "date")},
        ),
    ]
