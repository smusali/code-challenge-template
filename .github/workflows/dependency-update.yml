name: Dependency Updates

on:
  schedule:
    - cron: "0 8 * * 1" # Run every Monday at 8 AM UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.repository_owner == github.actor || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependency management tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools safety

      - name: Check current dependencies
        run: |
          pip install -r requirements.txt
          pip list --format=json > current-dependencies.json

      - name: Update requirements
        run: |
          # Backup current requirements
          cp requirements.txt requirements.txt.backup

          # Generate updated requirements
          pip-compile --upgrade --resolver=backtracking requirements.in || echo "No requirements.in found, upgrading current requirements.txt"

          # If no requirements.in, try to upgrade packages individually
          if [ ! -f requirements.in ]; then
            # Extract package names without versions
            grep -v "^#" requirements.txt | sed 's/[>=<].*//' > packages.txt

            # Install latest versions
            pip install --upgrade $(cat packages.txt)

            # Generate new requirements.txt
            pip freeze > requirements-new.txt

            # Only update if we have meaningful changes
            if ! cmp -s requirements.txt requirements-new.txt; then
              mv requirements-new.txt requirements.txt
            fi
          fi

      - name: Test updated dependencies
        run: |
          pip install -r requirements.txt
          python -c "import django; print(f'Django version: {django.get_version()}')"
          python -c "import fastapi; print(f'FastAPI version: {fastapi.__version__}')"

      - name: Run safety check on updated dependencies
        run: |
          safety check --json --output safety-check.json || echo "Safety check completed with warnings"

      - name: Run basic import tests
        run: |
          python -c "
          try:
              import django
              django.setup()
              from src.main import app
              print('✅ All critical imports successful')
          except Exception as e:
              print(f'❌ Import test failed: {e}')
              exit(1)
          "

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet requirements.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No dependency changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Dependency changes detected"
            git diff requirements.txt
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies"
          title: "🔄 Automated Dependency Update"
          body: |
            ## 🔄 Automated Dependency Update

            This PR contains automated dependency updates generated by the dependency update workflow.

            ### Changes
            - Updated package versions in `requirements.txt`
            - Safety check performed on updated dependencies
            - Basic import tests passed

            ### Safety Check Results
            See the attached safety-check.json artifact for vulnerability scanning results.

            ### Review Checklist
            - [ ] Review dependency changes
            - [ ] Verify all tests pass
            - [ ] Check for any breaking changes in updated packages
            - [ ] Ensure security scan results are acceptable

            ---

            **Auto-generated by:** `.github/workflows/dependency-update.yml`
            **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          branch: automated/dependency-update
          delete-branch: true
          draft: false

      - name: Upload safety check results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-safety-check
          path: |
            safety-check.json
            current-dependencies.json

  check-outdated:
    name: Check Outdated Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-check-updates

      - name: Check for outdated packages
        run: |
          echo "## Outdated Packages Report" > outdated-report.md
          echo "Generated on: $(date -u)" >> outdated-report.md
          echo "" >> outdated-report.md

          pip list --outdated --format=json > outdated.json

          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "[]" ]; then
            echo "### Packages with available updates:" >> outdated-report.md
            echo "" >> outdated-report.md
            echo "| Package | Current | Latest | Type |" >> outdated-report.md
            echo "|---------|---------|--------|------|" >> outdated-report.md

            python -c "
          import json
          import sys

          with open('outdated.json', 'r') as f:
              packages = json.load(f)

          for pkg in packages:
              name = pkg['name']
              current = pkg['version']
              latest = pkg['latest_version']
              pkg_type = pkg.get('latest_filetype', 'wheel')
              print(f'| {name} | {current} | {latest} | {pkg_type} |')
          " >> outdated-report.md
          else
            echo "✅ All packages are up to date!" >> outdated-report.md
          fi

      - name: Create issue for outdated packages
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('outdated-report.md', 'utf8');

            // Check if there's an existing issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['dependencies', 'automated']
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('Outdated Dependencies Report')
            );

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: report
              });
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              // Create new issue only if there are outdated packages
              if (!report.includes('All packages are up to date')) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `📦 Outdated Dependencies Report - ${new Date().toISOString().split('T')[0]}`,
                  body: report,
                  labels: ['dependencies', 'automated', 'maintenance']
                });
                console.log('Created new outdated dependencies issue');
              }
            }

      - name: Upload reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-reports
          path: |
            outdated-report.md
            outdated.json
