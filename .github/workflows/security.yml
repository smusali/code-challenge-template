name: Security Scan

on:
  schedule:
    - cron: "0 6 * * 1" # Run every Monday at 6 AM UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths:
      - "requirements.txt"
      - "pyproject.toml"
      - "src/**"
      - "core_django/**"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["python"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cyclonedx-bom safety pip-audit

      - name: Generate SBOM
        run: |
          cyclonedx-py -o weather-api-sbom.json --format json
        continue-on-error: true

      - name: Run safety check
        run: |
          safety check --json --output safety-detailed-report.json || true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-detailed.json || true

      - name: Upload SBOM and security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: supply-chain-reports
          path: |
            weather-api-sbom.json
            safety-detailed-report.json
            pip-audit-detailed.json

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install compliance tools
        run: |
          python -m pip install --upgrade pip
          pip install licensecheck

      - name: Check license compliance
        run: |
          licensecheck --format json --output-file license-report.json || true

      - name: Check for security best practices
        run: |
          # Check for hardcoded secrets patterns
          grep -r -n -E "(password|secret|key|token)" src/ core_django/ --include="*.py" || echo "No hardcoded secrets found"

          # Check for debug settings in production code
          grep -r -n "DEBUG.*=.*True" src/ core_django/ --include="*.py" || echo "No debug settings found"

          # Check for unsafe SSL settings
          grep -r -n -i "ssl.*false\|verify.*false" src/ core_django/ --include="*.py" || echo "No unsafe SSL settings found"

      - name: Upload compliance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compliance-reports
          path: license-report.json
