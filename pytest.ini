[tool:pytest]
# Pytest configuration for Weather Data Engineering API integration tests

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum Python version
minversion = 3.8

# Add options
addopts =
    -v
    --strict-markers
    --tb=short
    --disable-warnings
    --color=yes
    --durations=10

# Markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    api: marks tests as API tests
    documentation: marks tests as documentation tests
    performance: marks tests as performance tests

# Django settings
DJANGO_SETTINGS_MODULE = core_django.core.settings

# Test collection
collect_ignore =
    setup.py
    venv
    .git
    .pytest_cache
    htmlcov
    test_results

# Async support
asyncio_mode = auto

# Filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:django.*
    ignore::RuntimeWarning:asyncio.*

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage settings (when using --cov)
# These are used by pytest-cov plugin
[coverage:run]
source = src,core_django
omit =
    */tests/*
    */venv/*
    */migrations/*
    */manage.py
    */setup.py
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class.*\(Protocol\):
    @(abc\.)?abstractmethod
