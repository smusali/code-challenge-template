# Docker Compose for Weather Data Engineering API
# Development and local testing environment
name: weather-data-engineering-api
version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-weather_db}
      POSTGRES_USER: ${POSTGRES_USER:-weather_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-weather_pass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-weather_user} -d ${POSTGRES_DB:-weather_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - weather-network

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - weather-network

  # FastAPI Web Application
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      target: development
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-weather_user}:${POSTGRES_PASSWORD:-weather_pass}@db:5432/${POSTGRES_DB:-weather_db}
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-dev-secret-key-change-in-production}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0,web}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEVELOPMENT_MODE=true
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - weather-network

  # Data Ingestion Worker
  ingestion:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      target: ingestion
    restart: "no"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-weather_user}:${POSTGRES_PASSWORD:-weather_pass}@db:5432/${POSTGRES_DB:-weather_db}
      - WX_DATA_PATH=/app/wx_data
      - YLD_DATA_PATH=/app/yld_data
      - INGESTION_BATCH_SIZE=${INGESTION_BATCH_SIZE:-1000}
      - INGESTION_CONCURRENCY=${INGESTION_CONCURRENCY:-4}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    command:
      [
        "python",
        "-m",
        "scripts.ingest_wx",
        "--src",
        "/app/wx_data",
        "--db-url",
        "postgresql://weather_user:weather_pass@db:5432/weather_db",
      ]
    networks:
      - weather-network

  # Analytics & Scheduling Service
  analytics:
    build:
      context: .
      dockerfile: docker/Dockerfile.analytics
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-weather_user}:${POSTGRES_PASSWORD:-weather_pass}@db:5432/${POSTGRES_DB:-weather_db}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-dev-secret-key-change-in-production}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app
      - TZ=${TZ:-UTC}
      - ANALYTICS_ENABLED=${ANALYTICS_ENABLED:-true}
    volumes:
      - .:/app
      - ./logs:/app/logs
      - analytics_logs:/var/log/analytics
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD", "sh", "-c", "pgrep cron > /dev/null && echo 'Cron is running'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - weather-network

  # Database Admin Interface (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@weather.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - weather-network

  # Nginx Reverse Proxy (Production-like setup)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - weather-network

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - weather-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - weather-network

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  analytics_logs:
    driver: local

# Custom network for service communication
networks:
  weather-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
