# Pre-commit configuration for Weather Data Engineering API
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

default_language_version:
  python: python3.11

default_stages: [commit, push]

repos:
  # Built-in hooks for general file validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: ["--markdown-linebreak-ext=md"]
      - id: end-of-file-fixer
      - id: check-yaml
        args: ["--allow-multiple-documents"]
      - id: check-toml
      - id: check-json
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: ["--pytest-test-first"]
      - id: requirements-txt-fixer
      - id: fix-byte-order-marker
      - id: mixed-line-ending
      - id: check-ast
      - id: check-builtin-literals
      - id: check-added-large-files
        args: ["--maxkb=1000"]

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: isort (python)
        args: [--profile=black, --line-length=88]
        types_or: [python, pyi]

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        name: black (python)
        language_version: python3.11
        args: [--line-length=88, --target-version=py311]
        types_or: [python, pyi]

  # Python linting with ruff (replaces flake8, bandit, etc.)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.6
    hooks:
      - id: ruff
        name: ruff (python linter)
        args: [--fix, --exit-non-zero-on-fix]
        types_or: [python, pyi]
      - id: ruff-format
        name: ruff (python formatter)
        types_or: [python, pyi]

  # Python type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        name: mypy (static type checker)
        language: python
        types_or: [python, pyi]
        require_serial: true
        verbose: true
        additional_dependencies:
          - types-python-dateutil
          - types-requests
          - django-stubs
          - pydantic
        args: [--ignore-missing-imports, --install-types, --non-interactive]
        exclude: ^(migrations/|tests/|scripts/.*test.*\.py)

  # Security vulnerability scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: bandit (security linter)
        args: [-c, pyproject.toml]
        additional_dependencies: [bandit[toml]]
        exclude: ^tests/

  # Django-specific checks
  - repo: https://github.com/adamchainz/django-upgrade
    rev: 1.15.0
    hooks:
      - id: django-upgrade
        name: django-upgrade
        args: ["--target-version", "4.2"]
        files: \.py$
        exclude: ^(migrations/|venv/|\.venv/)

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: hadolint (dockerfile linter)
        files: ^docker/.*Dockerfile.*$

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        name: prettier (yaml/json formatter)
        files: \.(yaml|yml|json)$
        exclude: ^(.*\.min\.js|.*\.min\.css)$

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        name: markdownlint
        args: [--fix]
        exclude: ^(CHANGELOG\.md|\.github/)

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: shellcheck (shell script linter)

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: detect-secrets
        args: ["--baseline", ".secrets.baseline"]
        exclude: ^(poetry\.lock|\.env\.example)$

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Fast syntax and import checks
      - id: python-check-blanket-noqa
        name: check blanket noqa
        entry: python -m flake8 --select=F401
        language: python
        types: [python]
        require_serial: false

      # Django model validation
      - id: django-check
        name: django system check
        entry: python
        language: python
        pass_filenames: false
        always_run: true
        args: [core_django/manage.py, check, --deploy]
        stages: [push]

      # Run fast unit tests only on commit
      - id: pytest-fast
        name: pytest (fast unit tests)
        entry: python -m pytest
        language: python
        pass_filenames: false
        always_run: true
        args: [
          tests/unit/,
          -x,
          --tb=short,
          --maxfail=3,
          --disable-warnings,
          -q,
          --durations=5
        ]
        stages: [commit]

      # Run comprehensive tests on push
      - id: pytest-comprehensive
        name: pytest (comprehensive test suite)
        entry: python -m pytest
        language: python
        pass_filenames: false
        always_run: true
        args: [
          tests/,
          --tb=short,
          --maxfail=5,
          --cov=weather_api,
          --cov=core_django,
          --cov-fail-under=80,
          --cov-report=term-missing
        ]
        stages: [push]

      # Database migration validation
      - id: django-migrations-check
        name: django migrations check
        entry: python
        language: python
        pass_filenames: false
        always_run: true
        args: [core_django/manage.py, makemigrations, --check, --dry-run]
        stages: [push]

      # API schema validation
      - id: openapi-schema-check
        name: openapi schema validation
        entry: python
        language: python
        pass_filenames: false
        always_run: true
        args: ["-c", "import sys; sys.path.insert(0, 'weather_api'); from main import app; schema = app.openapi(); print('âœ“ OpenAPI schema is valid')"]
        stages: [push]

# Configuration for specific tools
ci:
    autofix_commit_msg: |
        [pre-commit.ci] auto fixes from pre-commit hooks

        for more information, see https://pre-commit.ci
    autofix_prs: true
    autoupdate_branch: ''
    autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
    autoupdate_schedule: weekly
    skip: [pytest-fast, pytest-comprehensive, django-check, django-migrations-check, openapi-schema-check]
    submodules: false 
