# Multi-stage Dockerfile for Weather Data Engineering API
# Optimized for production with proper security and performance

# Base stage with Python and system dependencies
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Copy requirements first to leverage Docker layer caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Development stage
FROM base as development

# Install development dependencies
RUN pip install --no-cache-dir \
    pytest \
    pytest-asyncio \
    pytest-cov \
    black \
    isort \
    mypy \
    flake8

# Copy source code
COPY . .

# Change ownership to app user
RUN chown -R appuser:appuser /app

# Switch to app user
USER appuser

# Expose development port
EXPOSE 8000

# Development command with hot reload
CMD ["python", "-m", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Production stage
FROM base as production

# Install only production dependencies
RUN pip install --no-cache-dir \
    gunicorn \
    uvicorn[standard]

# Copy application code
COPY --chown=appuser:appuser . .

# Create directories for logs and static files
RUN mkdir -p /app/logs /app/static && \
    chown -R appuser:appuser /app/logs /app/static

# Switch to app user
USER appuser

# Expose production port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Production command with gunicorn
CMD ["gunicorn", "src.main:app", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--workers", "4", \
     "--bind", "0.0.0.0:8000", \
     "--timeout", "30", \
     "--keep-alive", "5", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--preload", \
     "--log-level", "info", \
     "--access-logfile", "/app/logs/access.log", \
     "--error-logfile", "/app/logs/error.log"]

# Ingestion stage (for data ingestion tasks)
FROM base as ingestion

# Copy application code
COPY --chown=appuser:appuser . .

# Switch to app user
USER appuser

# Default command for ingestion tasks
CMD ["python", "-m", "core_django.models.management.commands.init_weather_data"]

# Testing stage
FROM development as testing

# Install test dependencies
RUN pip install --no-cache-dir \
    pytest-django \
    pytest-mock \
    coverage

# Copy test configuration
COPY pytest.ini .
COPY .coveragerc .

# Run tests
CMD ["python", "-m", "pytest", "--cov=src", "--cov-report=html", "--cov-report=term"]

# Lint stage
FROM development as lint

# Run linting and formatting checks
CMD ["sh", "-c", "black --check . && isort --check-only . && flake8 . && mypy src/"]
