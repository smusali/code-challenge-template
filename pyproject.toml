[tool.poetry]
name = "weather-data-engineering-api"
version = "0.1.0"
description = "A comprehensive data engineering solution for ingesting, analyzing, and serving weather data through a REST API"
authors = ["Samir Musali <samir.musali@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/smusali/code-challenge-template"
repository = "https://github.com/smusali/code-challenge-template"
keywords = ["weather", "data-engineering", "api", "fastapi", "django", "postgresql"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Framework :: Django",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{include = "weather_api"}, {include = "core_django"}]

[tool.poetry.dependencies]
python = "^3.11"
# Core API Framework
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
# Django ORM Integration
django = "^4.2.7"
# Database
psycopg2-binary = "^2.9.9"
asyncpg = "^0.29.0"
# Data Processing
pandas = "^2.1.3"
numpy = "^1.25.2"
# HTTP Client
httpx = "^0.25.2"
# Async Support
aiofiles = "^23.2.1"
# Validation & Serialization
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
# CLI Framework
click = "^8.1.7"
rich = "^13.7.0"
# Logging & Monitoring
structlog = "^23.2.0"
# Date/Time Handling
python-dateutil = "^2.8.2"
# Environment Management
python-dotenv = "^1.0.0"
# File Hashing
hashlib-compat = "^1.0.1"
# Progress Bars
tqdm = "^4.66.1"
# JSON Schema
jsonschema = "^4.20.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-django = "^4.7.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
# Code Quality
black = "^23.11.0"
isort = "^5.12.0"
ruff = "^0.1.6"
mypy = "^1.7.1"
# Pre-commit Hooks
pre-commit = "^3.6.0"
# Documentation
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
mkdocs-mermaid2-plugin = "^1.1.1"
# Database Tools
django-extensions = "^3.2.3"
# Development Server
watchdog = "^3.0.0"
# HTTP Testing
httpie = "^3.2.2"
# Database Migration Testing
pytest-postgresql = "^5.0.0"
# Performance Testing
locust = "^2.17.0"

[tool.poetry.group.lint.dependencies]
# Additional Linting
flake8 = "^6.1.0"
bandit = "^1.7.5"
safety = "^2.3.5"
# Type Checking
types-python-dateutil = "^2.8.19"
types-requests = "^2.31.0"
django-stubs = "^4.2.7"

[tool.poetry.scripts]
# Data Ingestion
ingest-wx = "scripts.ingest_wx:main"
compute-yearly-stats = "scripts.compute_yearly_stats:main"
# API Server
serve-api = "weather_api.main:serve"
# Database Management
manage-db = "core_django.manage:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# === Code Quality Configuration ===

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_glob = ["*/migrations/*"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # use raise from to chain exceptions
]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pycache__",
    "migrations",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "S311"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "scripts.*",
]
ignore_errors = true

[tool.django-stubs]
django_settings_module = "core_django.settings"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=weather_api",
    "--cov=core_django",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "db: marks tests that require database",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["weather_api", "core_django", "scripts"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/site-packages/*",
    "*/settings/*",
    "manage.py",
    "*/asgi.py",
    "*/wsgi.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"] 